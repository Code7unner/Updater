package main

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
	"strconv"
	"strings"

	"github.com/equinox-io/equinox"
)

// Assigned when creating a new application in the dashboard
const appID = "app_2aLEkLWsBiV"

// Public portion of signing key generated by `equinox genkey`
var publicKey = []byte(`
-----BEGIN ECDSA PUBLIC KEY-----
MHYwEAYHKoZIzj0CAQYFK4EEACIDYgAEUa8r3w9kZbn1FtrlFHanjtSRLXKqive9
7H3e0TNxis81IgVh5e3d7BK6sNfpKUMSEaFubsle/BqF+lyZqOxhwQFyGy4l/Blo
Mhih5J9ehsmh9vXxMN3zlMAzR10RbBnP
-----END ECDSA PUBLIC KEY-----
`)

type Contact struct {
	Email  string
	Github string
}

type Info struct {
	Version     string
	Description string
	Contact     Contact
}

func main() {
	programInfo := Info{
		"0.9.0",
		"This script checks for new version",
		Contact{
			"example@gmail.com",
			"http://github.com/example.com",
		},
	}

	needUpdate, err := needUpdate(programInfo)
	if err != nil {
		fmt.Println(err)
	}

	if needUpdate {
		fmt.Println("Start update")
		// Call update function
		doUpdate()
	} else {
		fmt.Println("Update not need")
	}
}

// Update binary file if version is updated
func doUpdate() error {
	var opts equinox.Options
	if err := opts.SetPublicKeyPEM(publicKey); err != nil {
		return err
	}

	// check for the update
	resp, err := equinox.Check(appID, opts)
	switch {
	case err == equinox.NotAvailableErr:
		fmt.Println("No update available, already at the latest version!")
		return nil
	case err != nil:
		fmt.Println("Update failed:", err)
		return err
	}

	// fetch the update and apply it
	err = resp.Apply()
	if err != nil {
		return err
	}

	fmt.Printf("Updated to new version: %s!\n", resp.ReleaseVersion)
	return nil
}

// Check ersion of app with github sevice
func needUpdate(cerVer Info) (bool, error) {
	resp, err := http.Get("http://meromen.github.io/go-tasks/updater/getInfo.json")
	if err != nil {
		return false, err
	}
	defer resp.Body.Close()

	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return false, err
	}

	var getInfo Info

	err = json.Unmarshal(body, &getInfo)
	if err != nil {
		return false, err
	}

	// Parsing string version to int
	intCurVer, _ := strconv.ParseInt(strings.Replace(cerVer.Version, ".", "", -1), 10, 64)
	intGetVer, _ := strconv.ParseInt(strings.Replace(getInfo.Version, ".", "", -1), 10, 64)

	anwser := intGetVer > intCurVer

	return anwser, nil
}
